// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleHospitalModel.DBModel;

namespace SimpleHospitalSystem.Migrations
{
    [DbContext(typeof(HospitalContext))]
    partial class HospitalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6");

            modelBuilder.Entity("SimpleHospitalModel.DBModel.Bed", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BedNumber")
                        .HasColumnType("TEXT")
                        .HasMaxLength(32);

                    b.Property<long>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoomNumber")
                        .HasColumnType("TEXT")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Bed");
                });

            modelBuilder.Entity("SimpleHospitalModel.DBModel.ClinicalData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChiefComplaint")
                        .HasColumnType("TEXT")
                        .HasMaxLength(10000);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("TEXT")
                        .HasMaxLength(10000);

                    b.Property<string>("History")
                        .HasColumnType("TEXT")
                        .HasMaxLength(10000);

                    b.Property<long>("PatientId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("ClinicalData");
                });

            modelBuilder.Entity("SimpleHospitalModel.DBModel.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("SimpleHospitalModel.DBModel.Patient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("BedId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("BedId")
                        .IsUnique();

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("SimpleHospitalModel.DBModel.Bed", b =>
                {
                    b.HasOne("SimpleHospitalModel.DBModel.Department", "Department")
                        .WithMany("Beds")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleHospitalModel.DBModel.ClinicalData", b =>
                {
                    b.HasOne("SimpleHospitalModel.DBModel.Patient", "Patient")
                        .WithMany("ClinicalData")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleHospitalModel.DBModel.Patient", b =>
                {
                    b.HasOne("SimpleHospitalModel.DBModel.Bed", "Bed")
                        .WithOne("Patient")
                        .HasForeignKey("SimpleHospitalModel.DBModel.Patient", "BedId")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
